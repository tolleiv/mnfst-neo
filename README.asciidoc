
# MnfsT impact

image:https://travis-ci.org/tolleiv/mnfst-neo.svg?branch=master["Build Status", link="https://travis-ci.org/tolleiv/mnfst-neo"]

Using central provisioning tools (Puppet, Chef, Ansible, SaltStack, ...) brings in the risk that one commit might break a lot of systems at once. Using convential CI tools mitigate that risk a lot but there's still the risk that a code change has a bigger impact than assumed.

This tool is a small graph driven approach to deal with that risk and answer the following questions:

 * Which systems might be effected by a code change in a certain set of files
 * What is the overall risk /reach of a certain change
 * Which provisioned `resources` are problematic (too active / failing in all runs)

Along with that main purpose, it's also able to couple monitoring and provisioning tools (documentation pending).

It's supposed to be versatile and not tool specific. Nevertheless, it's currently just used to companion our Puppet Server and it's Puppet Dashboard. The datamodule and the interface it not Puppet specific, though. You'll find https://gist.github.com/tolleiv/4ae437429129a9f2f50e[some wrapper scripts] in order to get it to work with Puppet.

## Screenshots

Along with the API documented below, the tool provides a user interface which shows some statistics. Here's a sneak peak:

image:https://gist.github.com/tolleiv/ae631eeff0a954cf3f29/raw/activity-distribution.png["Resource activity distribution chart"]
image:https://gist.github.com/tolleiv/ae631eeff0a954cf3f29/raw/file-score-distribution.png["File score distribution chart"]

# Installation

 1. Install Neo4j
 2. Install NodeJs or IOjs and NPM
 2. Clone this repository
 3. Run `npm install`
 4. Run `npm start`
 5. Push in some data
    * E.g. with the https://gist.github.com/tolleiv/4ae437429129a9f2f50e[Puppet wrapper scripts]
 6. Check the dashboard under `http://localhost:3000`

## Usage

     # Import the files which are contained in the servers catalog:
     curl -X PUT -H 'Content-Type:text/plain' \
         --data-binary "@./filelist.txt" http://localhost:3000/server/server.example.org

     # Import the files and resources from the servers catalog:
     curl -X PUT -H 'Content-Type:application/json' \
         --data-binary "@./filelist.json" http://localhost:3000/server/server.example.org

     # Get the score summed up for a list of files
     curl -X GET -H 'Content-Type:text/plain' \
         --data-binary "@./filelist.txt" http://localhost:3000/files/score

     # Get the score per file
     curl -X GET http://localhost:3000/files

     # Set the weight of a server
     curl -X POST -H 'Content-Type:application/json' \
         -d '{"weight":10}' http://localhost:3000/server/server.example.org

     # Cleanup all file relations of a server
     curl -X DELETE http://localhost:3000/server/server.example.org/files

     # Update the rate values for resources after an agent run:
     curl -X POST -H 'Content-Type:application/json' \
         --data-binary "@./changes.csv" \
          http://localhost:3000/server/server.example.org/rates/changes

     # Update the rate values for resources after an agent run:
     curl -X POST -H 'Content-Type:application/json' \
         -d '{"changes":["Exec[do]","Service[apache]"]}' \
          http://localhost:3000/server/server.example.org/rates

     # Remove a server
     curl -X DELETE http://localhost:3000/server/server.example.org

     # Remove a list of files
     curl -X DELETE -H 'Content-Type:text/plain' \
         --data-binary "@./filelist.txt" http://localhost:3000/files

## Data formats

### Content-type: text/plain

The filelist should just be a plaintext list file names delimited by newlines (\n).

     module/apache/manifests/init.pp
     module/apache/manifests/host.pp

### Content-type: text/csv

The extended file+resource list should be separated by a tab character as the default delimiter

     module/apache/manifests/init.pp     Service[apache2]
     module/apache/manifests/host.pp     File[a-vhost.conf]


### Content-type: application/json

The filelist should just be an array of file names:

    ['module/apache/manifests/init.pp','module/apache/manifests/host.pp']

The extended file+resource list should be an array of objects each with the file name and resource information:

    [
     {file: 'manifests/init.pp', resource: 'Service[apache]' },
     {file: 'manifests/host.pp', resource: 'File[a-vhost.conf]' }
    ]

## TODO List

 * Per File / Server dashboard
 * Puppet, Chef, Ansible integration workflow needs to be documented
 * Metrics generation, best practices need to be documented
 * The tool needs a proper name
 * Full demo dataset / demo instance tbd
 * Charts should be resizeable

## License

This is free and unencumbered software released into the public domain. See the UNLICENSE file or http://unlicense.org/ for more details.
